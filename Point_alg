import copy
import math
from read_file import read_file, pulp
from drawmap import visualize_maze as vm


def manhattan_Heuristic_Funct (X,Y): #X,Y: tọa độ 2 điểm trên không gian 2 chiều (bản đồ)
    dist = abs(Y[0] - X[0]) + abs(Y[1] - X[1])
    return dist
    

def heuristic_Matrix (matrix, des): #matrix: ma trận 2 chiều (bản đồ) đọc từ file, des: điểm thoát exit cần tìm
    heu_Matrix = []
    new = []
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            new.append(0)
        heu_Matrix.append(new)
        new=[]
    for i in range(len(heu_Matrix)):
        for j in range (len(heu_Matrix[0])):
            heu_Matrix[i][j] = manhattan_Heuristic_Funct((i,j), des)
    return heu_Matrix #Ma trận gồm các giá trị hàm heuristic để ước lượng khoảng cách từ điểm có tọa độ bất kì trên bản đồ đến điểm thoát exit



def Adj_ver(x,y): #(x = m: row, y = n: col)
    a = []
    global row
    global col
    if(x-1 >= 0):
        a.append((x-1,y))
    if (y-1 >=0 ):
        a.append((x,y-1))
    if(x+1<row):
        a.append((x+1,y))
    if(y+1<col):
        a.append((x,y+1))
    return a # a=[bottom, below, left, right]

# a* 
def man_A_Star(matrix, h_matrix, start, end):
    
    
    F = copy.deepcopy(matrix) #Ma trận danh sách liên kế, lưu vị trí của điểm trước khi đến nó
    len_Road = copy.deepcopy(matrix) #Ma trận chi phí đường đi


    for i in range(len(len_Road)):
        for j in range(len(len_Road[0])):
            len_Road[i][j] = math.inf
    len_Road[start[0]][start[1]] = 0

    f_Mat = copy.deepcopy(matrix) #Ma trận chi phí đường đi + giá trị heuristic
    for i in range(len(f_Mat)):
        for j in range(len(f_Mat[0])):
            f_Mat[i][j] = math.inf

    f_Mat[start[0]][start[1]] = h_matrix[start[0]][start[1]]

    prio_Q = [start]
    cost = 0
    while len(prio_Q) > 0:
        cost += 1
        cur = prio_Q.pop(0)

        if cur == end:
            break

        adj_arr = Adj_ver(cur[0],cur[1])

        for i in range (len(adj_arr)):
            if matrix[adj_arr[i][0]][adj_arr[i][1]] != 'x':
                temp_len_Road = len_Road[cur[0]][cur[1]] + 1
                temp_f = temp_len_Road + h_matrix[adj_arr[i][0]][adj_arr[i][1]]

                if temp_f < f_Mat[adj_arr[i][0]][adj_arr[i][1]]:
                    len_Road[adj_arr[i][0]][adj_arr[i][1]] = temp_len_Road
                    f_Mat[adj_arr[i][0]][adj_arr[i][1]] = temp_f
                    F[adj_arr[i][0]][adj_arr[i][1]] = cur
                    j = 0
                    while j < len(prio_Q):
                        if f_Mat[adj_arr[i][0]][adj_arr[i][1]] < f_Mat[prio_Q[j][0]][prio_Q[j][1]]:
                            break
                        j += 1
                    prio_Q.insert(j, adj_arr[i])


    route = [end]
    cur_point = end
    while cur_point != start:
        route.insert(0, F[cur_point[0]][cur_point[1]])
        cur_point = F[cur_point[0]][cur_point[1]]

    #print('Chi phi thuc hien A*: ', cost,' vong lap')
    return route, cost

flags = []
list_nodes = []

shorted_path = []
best_score = math.inf

def init(nodes):
    global flags
    global list_nodes
    global shorted_path
    global best_score

    flags = []
    list_nodes = []

    shorted_path = []
    best_score = math.inf

    for i in range(len(nodes)):
        flags.append(0)
    flags[0] = 1
    list_nodes.append(0)
def cost(list_nodes, edges, points):
    total = 0
    for i in range(len(list_nodes) - 2):
        total += edges[list_nodes[i]][list_nodes[i+1]] + points[list_nodes[i+1]][2]
    total += edges[list_nodes[-1]][list_nodes[-2]]
    return total


def find_shorted_path(nodes, points, edges, len_list):
    global flags
    global list_nodes
    global best_score
    global shorted_path
    if list_nodes[len_list - 1] == nodes - 1:
        current_cost = cost(list_nodes, edges, points)
        if current_cost < best_score:
            shorted_path = list_nodes[:]
            best_score = current_cost

    else:
        for i in range(nodes):
            if (flags[i] == 0):
                list_nodes.append(i)
                flags[i] = 1
                find_shorted_path(nodes, points, edges, len_list + 1)
                flags[i] = 0
                list_nodes.pop()


def Point_alg(matrix, bonus_points, h_matrix, start, end):
    bonus_points.insert(0,(start[0], start[1], 0))
    bonus_points.append((end[0], end[1], 0))
    print("points: ", bonus_points)
    n_point=len(bonus_points)
    # 2d array, element is the path from row i to col j
    path_matrix=[[[] for i in range(n_point)] for j in range(n_point)]
    # 2d array, element is the cost from row i to col j
    cost_matrix=[[0 for i in range(n_point)] for j in range(n_point)]
    for i in range (len(bonus_points)):
        for j in range (i+1, len(bonus_points)):
            path_matrix[i][j] =man_A_Star(matrix, h_matrix, (bonus_points[i][0],bonus_points[i][1]), (bonus_points[j][0],bonus_points[j][1]))[0]
            cost_matrix[i][j] = cost_matrix[j][i] = len(path_matrix[i][j])
            if (j != len(bonus_points) - 1) and (j != 0):
                path_matrix[j][i] =man_A_Star(matrix, h_matrix,  (bonus_points[j][0],bonus_points[j][1]),(bonus_points[i][0],bonus_points[i][1]))[0]
                cost_matrix[i][j] = cost_matrix[j][i] = len(path_matrix[i][j])
            else:
                path_matrix[j][i]=path_matrix[i][j]
    
    init(bonus_points)
    find_shorted_path(len(bonus_points), bonus_points, cost_matrix, 1)

    print("Cost: ", best_score)
    official_path = path_matrix[0][shorted_path[1]]
    for i in range(2,len(shorted_path)):
        official_path += path_matrix[shorted_path[i-1]][shorted_path[i]]

    return official_path

    
    
    ######## test


bonus_points, matrix = read_file('StarNormal_BFS.txt')
row=len(matrix)
col=len(matrix[0])
print(f'The height of the matrix: {len(matrix)}')
print(f'The width of the matrix: {len(matrix[0])}')
start=pulp(matrix)[0]
end=pulp(matrix)[1]


#Test
h_matrix = heuristic_Matrix(matrix, end)
route = Point_alg(matrix,bonus_points,h_matrix,start,end)

vm(matrix,bonus_points,start,end,route)